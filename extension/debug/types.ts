//===----------------------------------------------------------------------===
// Copyright (c) 2025, Modular Inc. All rights reserved.
//
// Licensed under the Apache License v2.0 with LLVM Exceptions:
// https://llvm.org/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===

export type FrameId = number;
export type RequestId = number;
export type SessionId = string;
/**
 * This is a display name generated by LLDB that attempts to be unique.
 */
export type VariableDisplayName = string;
/**
 * This name is an LLDB variable path that could collide in case of shadowing.
 */
export type VariableEvaluateName = string;

export type Variable = {
  name: VariableDisplayName;
  evaluateName: VariableEvaluateName;
  value: string;
  /**
   * Extension to the protocol.
   */
  $__lldb_extensions: {
    /**
     * A summary generated by lldb-dap if `SBValue` doesn't have an actual
     * summary.
     */
    autoSummary?: string;
    /**
     * A standard summary generated by `SBValue`.
     */
    summary?: string;
    /**
     * An error message if it was not possible to generate a value or a summary.
     */
    error?: string;
    /**
     * The source declaration of the variable.
     */
    declaration?: { path?: string; line?: number; column?: number };
  };
};

export type DAPScopesRequest = {
  command: 'scopes';
  seq: RequestId;
  arguments: { frameId: FrameId };
};

export type DAPVariablesRequest = {
  command: 'variables';
  seq: RequestId;
  arguments: { variablesReference: number };
};

export type DAPVariablesResponse = {
  command: 'variables';
  request_seq: RequestId;
  body: { variables: Variable[] };
};
